from datetime import datetime, timezone
from os import PathLike
from typing import Self

from snps import SNPs

from utils_list import create_summary

ALLELES_INVALID = r'[^ACGTDI\-0]+'
ALLELES_NA = r'.*[-0]+.*'
CHROMOSOMES_INVALID = r'[^0-9XYMT]+'
RSIDS_INVALID = r'[^0-9a-z]+'


class IndividualGenome:
    def __init__(self,
                 file_path: str | bytes | PathLike[str] | PathLike[bytes]):
        snps = SNPs(file=file_path)
        self.snps = snps.snps
        self.source = snps.source
        self.build = snps.build
        self.build_detected = snps.build_detected
        self.phased = snps.phased
        self.count = snps.count
        self.chromosomes = snps.chromosomes

    def clean(self) -> Self:
        self.snps['genotype'] = self.snps['genotype'].str.upper()
        self.snps['genotype'] = self.snps['genotype'].str.replace(ALLELES_INVALID, "", regex=True)
        self.snps['genotype'] = self.snps['genotype'].str.replace(ALLELES_NA, "--", regex=True)
        self.snps['genotype'] = self.snps['genotype'].fillna("--")
        self.snps['chrom'] = self.snps['chrom'].str.upper()
        self.snps['chrom'] = self.snps['chrom'].str.replace(CHROMOSOMES_INVALID, '', regex=True)
        self.snps.index = self.snps.index.str.lower()
        self.snps.index = self.snps.index.str.replace(RSIDS_INVALID, '', regex=True)
        self.snps = self.snps[~self.snps.index.duplicated(keep='first')]
        self.snps = self.snps[self.snps.index.str.startswith('rs')]
        self.count = len(self.snps)
        self.chromosomes = sorted(self.snps['chrom'].unique().tolist())
        return self

    def get_snps(self) -> set[int]:
        return set(self.snps.index.str.replace('rs', '').astype(int).tolist())

    def save(self,
             file_path: str | bytes | PathLike[str] | PathLike[bytes]):
        with open(file_path, 'w', newline='') as f:
            f.write("# Generated by snps v2.8.2, https://pypi.org/project/snps/\n")
            f.write(f"# Generated at {datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M:%S UTC')}\n")
            f.write(f'# Source(s): {self.source}\n')
            f.write(f'# Build: {self.build}\n')
            f.write(f'# Build Detected: {self.build_detected}\n')
            f.write(f'# Phased: {self.phased}\n')
            f.write(f'# SNPs: {self.count}\n')
            f.write(f'# Chromosomes: {create_summary(self.chromosomes)}\n')
            self.snps.to_csv(f, index=True, header=['chromosome', 'position', 'genotype'])
